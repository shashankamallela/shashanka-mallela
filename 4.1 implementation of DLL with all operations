#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};
void insertAtBeginning(struct Node** head, int newData) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = newData;
    newNode->prev = NULL;
    newNode->next = (*head);

    if ((*head) != NULL) {
        (*head)->prev = newNode;
    }

    (*head) = newNode;
}
void insertAtMiddle(struct Node* prevNode, int newData) {
    if (prevNode == NULL) {
        printf("\nPrevious node cannot be NULL");
        return;
    }
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = newData;
    newNode->prev = prevNode;
    newNode->next = prevNode->next;

    if (prevNode->next != NULL) {
        prevNode->next->prev = newNode;
    }
    prevNode->next = newNode;
}
void insertAtEnd(struct Node** head, int newData) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    struct Node* last = *head;
    newNode->data = newData;
    newNode->next = NULL;
    if (*head == NULL) {
        newNode->prev = NULL;
        *head = newNode;
        return;
    }
    while (last->next != NULL) {
        last = last->next;
    }
    last->next = newNode;
    newNode->prev = last;
}
void deleteFromBeginning(struct Node** head) {
    if (*head == NULL) {
        printf("DLL is empty");
        return;
    }
    struct Node* temp = *head;
    *head = (*head)->next;

    if (*head != NULL) {
        (*head)->prev = NULL;
    }

    free(temp);
}
void deleteFromMiddle(struct Node* nodeToDelete) {
    if (nodeToDelete == NULL) {
        printf("Node to delete cannot be NULL");
        return;
    }
    if (nodeToDelete->prev != NULL) {
        nodeToDelete->prev->next = nodeToDelete->next;
    }
    if (nodeToDelete->next != NULL) {
        nodeToDelete->next->prev = nodeToDelete->prev;
    }
    free(nodeToDelete);
}
void deleteFromEnd(struct Node** head) {
    if (*head == NULL) {
        printf("DLL is empty");
        return;
    }
    struct Node* last = *head;
    while (last->next != NULL) {
        last = last->next;
    }
    if (last->prev != NULL) {
        last->prev->next = NULL;
    } else {
        *head = NULL;
    }
    free(last);
}
void display(struct Node* head) {
    struct Node* current = head;

    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}
struct Node* search(struct Node* head, int searchData) {
    struct Node* current = head;

    while (current != NULL) {
        if (current->data == searchData) {
            return current;
        }
        current = current->next;
    }

    return NULL;
}
void sort(struct Node** head) {
    struct Node* current = *head;
    struct Node* index = NULL;
    int temp;

    if (*head == NULL) {
        return;
    }
    while (current != NULL) {
        index = current->next;

        while (index != NULL) {
            if (current->data > index->data) {
                temp = current->data;
                current->data = index->data;
                index->data = temp;
            }
            index = index->next;
        }
        current = current->next;
    }
}
int findMax(struct Node* head) {
    if (head == NULL) {
        printf("DLL is empty");
        return -1;
    }
    int max = head->data;
    struct Node* current = head->next;

    while (current != NULL) {
        if (current->data > max) {
            max = current->data;
        }
        current = current->next;
    }
    return max;
}
int findMin(struct Node* head) {
    if (head == NULL) {
        printf("DLL is empty");
        return -1;
    }
    int min = head->data;
    struct Node* current = head->next;
    while (current != NULL) {
        if (current->data < min) {
            min = current->data;
        }
        current = current->next;
    }
    return min;
}
int main() {
    struct Node* head = NULL;
    insertAtBeginning(&head, 5);
    insertAtBeginning(&head, 10);
    insertAtBeginning(&head, 15);
    struct Node* middleNode = search(head, 10);
    insertAtMiddle(middleNode, 20);
    insertAtMiddle(middleNode, 25);
    insertAtEnd(&head, 30);
    insertAtEnd(&head, 35);
    printf("\nname:m.shashanka");
    	printf("\nreg no:192311083");
    printf("\nDLL: ");
    display(head);
    deleteFromBeginning(&head);
    deleteFromBeginning(&head);
    struct Node* nodeToDelete = search(head, 20);
    deleteFromMiddle(nodeToDelete);
    deleteFromEnd(&head);
    printf("DLL after deletion: ");
    display(head);
    sort(&head);
    printf("Sorted DLL: ");
    display(head);
    int max = findMax(head);
    int min = findMin(head);
    printf("Maximum value: %d\n", max);
    printf("Minimum value: %d\n", min);
    return 0;
}
